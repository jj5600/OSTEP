#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() 
{
    int fd[2];  // File descriptors for the pipe
    int fd1[2];
    /*
    if (pipe(fd) == -1) 
    {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }
    */
    // Fork a child process
    int pid = fork();

    if (pid == -1) 
    {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) // child 1 process
    {
        // Child process
        /*
        close(fd[0]);  // Close the read end of the pipe
        char message[] = "Hello from the child process!\n";
        write(fd[1], message, sizeof(message));
        close(fd[1]);  // Close the write end of the pipe in the child
        */
        if (pipe(fd1) == -1) //creating child process 2
        {
            perror("Pipe1 creation failed");
            exit(EXIT_FAILURE);
        }
        int pid1 = fork();

        if (pid1 == -1) {
            perror("Fork failed");
            exit(EXIT_FAILURE);
        }
        if (pid1 == 0) {
            // Child process
            close(fd1[0]);  // Close the read end of the pipe
            char message1[] = "Hello from the child2 process!\n";
            write(fd1[1], message1, sizeof(message1));
            close(fd1[1]);  // Close the write end of the pipe in the child
        }else {

                close(fd1[1]);  // Close the write end of the pipe
                char bufferZ[100];
                read(fd1[0], bufferZ, sizeof(bufferZ));
                printf("CHILD 1 received: %s", bufferZ);
                close(fd1[0]);  // Close the read end of the pipe in the parent


        }


    } else {
        // Parent process
        /* close(fd[1]);  // Close the write end of the pipe
        char buffer[100];
        read(fd[0], buffer, sizeof(buffer));
        printf("Parent received: %s", buffer);
        close(fd[0]);  // Close the read end of the pipe in the parent */
    }
    
    return 0;
    
 }
